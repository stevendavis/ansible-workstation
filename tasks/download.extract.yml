- name: Create software directory
  file:
    path: "{{ansible_user_dir}}/software"
    state: directory

- name: Install Aliview
  block:
    # Download and uncompress Aliview
    - unarchive:
        src="http://www.ormbunkar.se/aliview/downloads/linux/linux-versions-all/linux-version-1.24/aliview.tgz"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/aliview"
        copy=no
    # Add Aliview to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/aliview"

- name: Install ART
  block:
    # Download and uncompress ART
    - command: wget --referer=https://www.niehs.nih.gov/research/resources/software/biostatistics/art/index.cfm  https://www.niehs.nih.gov/research/resources/assets/docs/artbinmountrainier2016.06.05linux64.tgz
      args:
        chdir: "~/Downloads"
        creates: "~/Downloads/artbinmountrainier2016.06.05linux64.tgz"
    - unarchive:
        src="~/Downloads/artbinmountrainier2016.06.05linux64.tgz"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/art_bin_MountRainier"
        copy=no
    # Add ART to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/art_bin_MountRainier"

- name: Check for existing BamUtil installation
  stat:
    path: "{{ansible_user_dir}}/software/bamUtil_1.0.13/bamUtil/bin"
  register: bamUtil_bin_directory

- name: Install BamUtil
  when: not bamUtil_bin_directory.stat.exists
  block:
    # Download and uncompress BamUtil
    - unarchive:
        src="https://genome.sph.umich.edu/w/images/7/70/BamUtilLibStatGen.1.0.13.tgz"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/bamUtil_1.0.13"
        copy=no
    # Do not treat warnings as errors
    - replace:
        path: "{{ansible_user_dir}}/software/bamUtil_1.0.13/libStatGen/general/Makefile"
        regexp: '-Werror'
        replace: ''
        backup: yes
    - make:
        chdir: "{{ansible_user_dir}}/software/bamUtil_1.0.13"
        target: all
    # Add BamUtil to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/bamUtil_1.0.13/bamUtil/bin"

- name: Check for existing htslib installation
  stat:
    path: "{{ansible_user_dir}}/software/htslib-1.8"
  register: htslib_bin_directory

- name: Install htslib (bgzip and tabix)
  when: not htslib_bin_directory.stat.exists
  block:
    # Download and uncompress htslib
    - unarchive:
        src="https://github.com/samtools/htslib/releases/download/1.8/htslib-1.8.tar.bz2"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/htslib-1.8"
        copy=no
    - make:
        chdir: "{{ansible_user_dir}}/software/htslib-1.8"
    - make:
        chdir: "{{ansible_user_dir}}/software/htslib-1.8"
        target: install
      become: yes

- name: Install Bcftools
  block:
    # Download and uncompress Bcftools
    - unarchive:
        src="https://github.com/samtools/bcftools/releases/download/1.8/bcftools-1.8.tar.bz2"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/bcftools-1.8"
        copy=no
    - make:
        chdir: "{{ansible_user_dir}}/software/bcftools-1.8"
    # Add Bcftools to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/bcftools-1.8"

- name: Install Bowtie2
  block:
    # Download and uncompress Bowtie2
    - unarchive:
        src="https://sourceforge.net/projects/bowtie-bio/files/bowtie2/2.3.4.1/bowtie2-2.3.4.1-linux-x86_64.zip/download"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/bowtie2-2.3.4.1-linux-x86_64"
        copy=no
    # Add Bowtie2 to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/bowtie2-2.3.4.1-linux-x86_64"

- name: Install FastQC
  block:
    # Download and uncompress FastQC
    - unarchive:
        src="https://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.7.zip"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/FastQC"
        mode=u+rwx
        copy=no
    # Add FastQC to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/FastQC"

- name: Install Fastx Toolkit
  block:
    # Download and uncompress Fastx Toolkit
    - unarchive:
        src="http://hannonlab.cshl.edu/fastx_toolkit/fastx_toolkit_0.0.13_binaries_Linux_2.6_amd64.tar.bz2"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/fastx-toolkit"
        copy=no
    # The unarchived fastx directory is called "bin", rename it
    - command: mv "{{ansible_user_dir}}/software/bin" "{{ansible_user_dir}}/software/fastx-toolkit" creates="{{ansible_user_dir}}/software/fastx-toolkit" removes="{{ansible_user_dir}}/software/bin"
    # Add Fastx Toolkit to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/fastx-toolkit"

- name: Install Figtree
  block:
    # Download Figtree
    - get_url:
        url: "http://tree.bio.ed.ac.uk/download.php?id=96&num=3"
        dest: "{{ansible_user_dir}}/Downloads/FigTree_v1.4.3.tgz"
    # Uncompress figtree
    - unarchive:
        src="{{ansible_user_dir}}/Downloads/FigTree_v1.4.3.tgz"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/FigTree_v1.4.3"
    # Update figtree script with correct jar file location -- replace existing line
    - lineinfile:
        path: "{{ansible_user_dir}}/software/FigTree_v1.4.3/bin/figtree"
        regexp: "jar lib/figtree.jar"
        state: "absent"
    - lineinfile:
        path: "{{ansible_user_dir}}/software/FigTree_v1.4.3/bin/figtree"
        line: "java -Xms64m -Xmx512m -jar {{ansible_user_dir}}/software/FigTree_v1.4.3/lib/figtree.jar"
        state: "present"
    # Make the launch script executable
    - file:
        path: "{{ansible_user_dir}}/software/FigTree_v1.4.3/bin/figtree"
        mode: u+rwx
    # Add Figtree to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/FigTree_v1.4.3/bin"

- name: Install Gingr
  block:
    # Download and uncompress Gingr
    - unarchive:
        src="https://github.com/marbl/gingr/releases/download/v1.2/gingr-Linux64-v1.2.tar.gz"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/gingr-Linux64-v1.2"
        copy=no
    # Add Gingr to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/gingr-Linux64-v1.2"

- name: Install HarvestTools
  block:
    # Download and uncompress HarvestTools
    - unarchive:
        src="https://github.com/marbl/harvest-tools/releases/download/v1.2/harvesttools-Linux64-v1.2.tar.gz"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/harvesttools-Linux64-v1.2"
        copy=no
    # Add HarvestTools to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/harvesttools-Linux64-v1.2"

- name: Install IGV
  block:
    # Download and uncompress IGV
    - unarchive:
        src="http://data.broadinstitute.org/igv/projects/downloads/2.4/IGV_2.4.18.zip"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/IGV_2.4.18"
        copy=no
    # Create "igv" symlink
    - file:
        src: "igv.sh"
        dest: "{{ansible_user_dir}}/software/IGV_2.4.18/igv"
        state: link
    # Add IGV to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/IGV_2.4.18"

- name: Install IQTree
  block:
    # Download and uncompress IQTree
    - unarchive:
        src="https://github.com/Cibiv/IQ-TREE/releases/download/v1.6.7.1/iqtree-1.6.7.1-Linux.tar.gz"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/iqtree-1.6.7.1-Linux"
        copy=no
    # Add IQTree to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/iqtree-1.6.7.1-Linux/bin"

- name: Check for existing Jellyfish installation
  stat:
    path: "{{ansible_user_dir}}/software/jellyfish-2.2.10/jellyfish"
  register: jellyfish_exe

- name: Install Jellyfish
  when: not jellyfish_exe.stat.exists
  block:
    # Create Jellyfish dest directory
    - file:
        path: "{{ansible_user_dir}}/software/jellyfish-2.2.10"
        state: directory
        recurse: yes
    # Download Jellyfish
    - get_url:
        url: "https://github.com/gmarcais/Jellyfish/releases/download/v2.2.10/jellyfish-linux"
        dest: "{{ansible_user_dir}}/software/jellyfish-2.2.10"
        mode: u+rwx
    # Rename the executable
    - command: mv "{{ansible_user_dir}}/software/jellyfish-2.2.10/jellyfish-linux"
                  "{{ansible_user_dir}}/software/jellyfish-2.2.10/jellyfish"
                  creates="{{ansible_user_dir}}/software/jellyfish-2.2.10/jellyfish"
                  removes="{{ansible_user_dir}}/software/jellyfish-2.2.10/jellyfish-linux"
    # Add Jellyfish to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/jellyfish-2.2.10/"

- name: Install Mauve
  block:
    # Download and uncompress Mauve
    - unarchive:
        src="http://darlinglab.org/mauve/snapshots/2015/2015-02-13/linux-x64/mauve_linux_snapshot_2015-02-13.tar.gz"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/mauve_snapshot_2015-02-13"
        copy=no
    # Add Mauve to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/mauve_snapshot_2015-02-13"

- name: Install Mugsy
  block:
    # Download and uncompress Mugsy
    - unarchive:
        src="https://sourceforge.net/projects/mugsy/files/mugsy_x86-64-v1r2.3.tgz/download"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/mugsy_x86-64-v1r2.3"
        copy=no
    # Update Mugsy env script -- replace existing line
    - lineinfile:
        path: "{{ansible_user_dir}}/software/mugsy_x86-64-v1r2.3/mugsyenv.sh"
        line: "export MUGSY_INSTALL={{ansible_user_dir}}/software/mugsy_x86-64-v1r2.3"
        regexp: "export MUGSY_INSTALL"
    # Add Mugsy env script to .bashrc if it does not exist
    - blockinfile:
        path: ~/.bashrc
        marker_begin: "BEGIN mugsy"
        marker_end: "END mugsy"
        block: |
          # Init mugsy
          source ~/software/mugsy_x86-64-v1r2.3/mugsyenv.sh

- name: Install Muscle
  block:
    # Create Muscle dest directory
    - file:
        path: "{{ansible_user_dir}}/software/muscle3.8.31"
        state: directory
        recurse: yes
    # Download and uncompress Muscle
    - unarchive:
        src="https://www.drive5.com/muscle/downloads3.8.31/muscle3.8.31_i86linux64.tar.gz"
        dest="{{ansible_user_dir}}/software/muscle3.8.31"
        creates="{{ansible_user_dir}}/software/muscle3.8.31/muscle3.8.31_i86linux64"
        copy=no
    # Create "muscle" symlink
    - file:
        src: "muscle3.8.31_i86linux64"
        dest: "{{ansible_user_dir}}/software/muscle3.8.31/muscle"
        state: link
    # Add Muscle to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/muscle3.8.31"

- name: Install Parsnp
  block:
    # Download and uncompress Parsnp
    - unarchive:
        src="https://github.com/marbl/parsnp/releases/download/v1.2/parsnp-Linux64-v1.2.tar.gz"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/Parsnp-Linux64-v1.2"
        copy=no
    # Add Parsnp to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/Parsnp-Linux64-v1.2"

- name: Install Picard
  block:
    # Create Picard dest directory
    - file:
        path: "{{ansible_user_dir}}/software/picard.2.18.4"
        state: directory
        recurse: yes
    - file:
        path: "{{ansible_user_dir}}/software/picard.2.18.11"
        state: directory
        recurse: yes
    # Download Picard
    -  get_url:
        url: "https://github.com/broadinstitute/picard/releases/download/2.18.4/picard.jar"
        dest: "{{ansible_user_dir}}/software/picard.2.18.4"
    -  get_url:
        url: "https://github.com/broadinstitute/picard/releases/download/2.18.11/picard.jar"
        dest: "{{ansible_user_dir}}/software/picard.2.18.11"
    # Add Picard to classpath in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export CLASSPATH=~/software/picard.2.18.11/picard.jar:$CLASSPATH"

- name: Install pyenv
  block:
    # Clone the pyenv git repo
    - git:
        repo: "https://github.com/pyenv/pyenv.git"
        dest: ~/.pyenv
    # Define PYENV_ROOT in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PYENV_ROOT=\"$HOME/.pyenv\""
    # Add pyenv to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=\"$PYENV_ROOT/bin:$PATH\""
    # Add pyenv init to .bashrc if it does not exist
    - blockinfile:
        path: ~/.bashrc
        marker_begin: "BEGIN pyenv"
        marker_end: "END pyenv"
        block: |
          # Init pyenv
          if command -v pyenv 1>/dev/null 2>&1; then
            eval "$(pyenv init -)"
          fi

- name: Install pyenv-virtualenv
  block:
    # Clone the pyenv-virtualenv git repo into the pyenv repo
    - git:
        repo: "https://github.com/pyenv/pyenv-virtualenv.git"
        dest: ~/.pyenv/plugins/pyenv-virtualenv

- name: Check for existing RAxML installation
  stat:
    path: "{{ansible_user_dir}}/software/standard-RAxML-8.2.12/raxml"
  register: raxml_executable

- name: Install RAxML
  when: not raxml_executable.stat.exists
  block:
    # Download and uncompress RAxML
    - unarchive:
        src="https://github.com/stamatak/standard-RAxML/archive/v8.2.12.tar.gz"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/standard-RAxML-8.2.12"
        copy=no
    - make:
        chdir: "{{ansible_user_dir}}/software/standard-RAxML-8.2.12"
        file: Makefile.AVX.PTHREADS.gcc
    # Create RAxML symlink
    - file:
        src: "raxmlHPC-PTHREADS-AVX"
        dest: "{{ansible_user_dir}}/software/standard-RAxML-8.2.12/raxml"
        state: link
    - name: Clean RAxML object files
      file:
        state: absent
        path: "{{ item }}"
      with_fileglob:
        - "{{ansible_user_dir}}/software/standard-RAxML-8.2.12/*.o"
    # Add RAxML to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/standard-RAxML-8.2.12"

- name: Install RTG-Tools
  block:
    # Download and uncompress RTG-Tools
    - unarchive:
        src="https://github.com/RealTimeGenomics/rtg-tools/releases/download/3.9.1/rtg-tools-3.9.1-linux-x64.zip"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/rtg-tools-3.9.1/"
        copy=no
    # Add RTG-Tools to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/rtg-tools-3.9.1/"

- name: Install Samtools
  block:
    # Download and uncompress Samtools
    - unarchive:
        src="https://sourceforge.net/projects/samtools/files/samtools/1.4/samtools-1.4.tar.bz2"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/samtools-1.4"
        copy=no
    - unarchive:
        src="https://sourceforge.net/projects/samtools/files/samtools/1.8/samtools-1.8.tar.bz2"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/samtools-1.8"
        copy=no
    - make:
        chdir: "{{ansible_user_dir}}/software/samtools-1.4"
    - make:
        chdir: "{{ansible_user_dir}}/software/samtools-1.8"
    # Add Samtools to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/samtools-1.8:~/software/samtools-1.8/misc"

- name: Install Seaview
  block:
    # Download and uncompress Seaview
    - unarchive:
        src="http://doua.prabi.fr/software/seaview_data/seaview4-64.tgz"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/seaview"
        copy=no
    # Add Seaview to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/seaview"

- name: Check for existing smalt installation
  stat:
    path: "{{ansible_user_dir}}/software/smalt-0.7.6"
  register: smalt_bin_directory

- name: Install smalt
  when: not smalt_bin_directory.stat.exists
  block:
    # Download and uncompress smalt
    - unarchive:
        src="https://sourceforge.net/projects/smalt/files/smalt-0.7.6-static.tar.gz"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/smalt-0.7.6"
        copy=no
    - name: configure
      command: ./configure
      args:
        chdir: "{{ansible_user_dir}}/software/smalt-0.7.6"
    - make:
        chdir: "{{ansible_user_dir}}/software/smalt-0.7.6"
    - make:
        chdir: "{{ansible_user_dir}}/software/smalt-0.7.6"
        target: install
      become: yes

- name: Install VarScan
  block:
    # Create VarScan dest directory
    - file:
        path: "{{ansible_user_dir}}/software/varscan.v2.3.9"
        state: directory
        recurse: yes
    # Download VarScan
    -  get_url:
        url: "https://sourceforge.net/projects/varscan/files/VarScan.v2.3.9.jar/download"
        dest: "{{ansible_user_dir}}/software/varscan.v2.3.9/VarScan.jar"
    # Add VarScan to classpath in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export CLASSPATH=~/software/varscan.v2.3.9/VarScan.jar:$CLASSPATH"
