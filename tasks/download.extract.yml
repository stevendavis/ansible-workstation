- name: Install Aliview
  block:
    # Download and uncompress Aliview
    - unarchive:
        src="http://www.ormbunkar.se/aliview/downloads/linux/linux-versions-all/linux-version-1.23/aliview.tgz"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/aliview"
        copy=no
    # Add Aliview to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/aliview"

- name: Install ART
  block:
    # Download and uncompress ART
    - command: wget --referer=https://www.niehs.nih.gov/research/resources/software/biostatistics/art/index.cfm  https://www.niehs.nih.gov/research/resources/assets/docs/artbinmountrainier2016.06.05linux64.tgz
      args:
        chdir: "~/Downloads"
        creates: "~/Downloads/artbinmountrainier2016.06.05linux64.tgz"
    - unarchive:
        src="~/Downloads/artbinmountrainier2016.06.05linux64.tgz"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/art_bin_MountRainier"
        copy=no
    # Add ART to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/art_bin_MountRainier"

- name: Install Bcftools
  block:
    # Download and uncompress Bcftools
    - unarchive:
        src="https://github.com/samtools/bcftools/releases/download/1.8/bcftools-1.8.tar.bz2"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/bcftools-1.8"
        copy=no
    - make:
        chdir: "{{ansible_user_dir}}/software/bcftools-1.8"
    # Add Bcftools to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/bcftools-1.8"

- name: Install Bowtie2
  block:
    # Download and uncompress Bowtie2
    - unarchive:
        src="https://sourceforge.net/projects/bowtie-bio/files/bowtie2/2.3.4.1/bowtie2-2.3.4.1-linux-x86_64.zip/download"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/bowtie2-2.3.4.1-linux-x86_64"
        copy=no
    # Add Bowtie2 to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/bowtie2-2.3.4.1-linux-x86_64"

- name: Install FastQC
  block:
    # Download and uncompress FastQC
    - unarchive:
        src="https://www.bioinformatics.babraham.ac.uk/projects/fastqc/fastqc_v0.11.7.zip"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/FastQC"
        mode=u+rwx
        copy=no
    # Add FastQC to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/FastQC"

- name: Install Fastx Toolkit
  block:
    # Download and uncompress Fastx Toolkit
    - unarchive:
        src="http://hannonlab.cshl.edu/fastx_toolkit/fastx_toolkit_0.0.13_binaries_Linux_2.6_amd64.tar.bz2"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/fastx-toolkit"
        copy=no
    # The unarchived fastx directory is called "bin", rename it
    - command: mv "{{ansible_user_dir}}/software/bin" "{{ansible_user_dir}}/software/fastx-toolkit" creates="{{ansible_user_dir}}/software/fastx-toolkit" removes="{{ansible_user_dir}}/software/bin"
    # Add Fastx Toolkit to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/fastx-toolkit"

- name: Check for existing htslib installation
  stat:
    path: "{{ansible_user_dir}}/software/htslib-1.8"
  register: htslib_bin_directory

- name: Install htslib (bgzip and tabix)
  when: not htslib_bin_directory.stat.exists
  block:
    # Download and uncompress htslib
    - unarchive:
        src="https://github.com/samtools/htslib/releases/download/1.8/htslib-1.8.tar.bz2"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/htslib-1.8"
        copy=no
    - make:
        chdir: "{{ansible_user_dir}}/software/htslib-1.8"
    - make:
        chdir: "{{ansible_user_dir}}/software/htslib-1.8"
        target: install
      become: yes

- name: Install Mugsy
  block:
    # Download and uncompress Mugsy
    - unarchive:
        src="https://sourceforge.net/projects/mugsy/files/mugsy_x86-64-v1r2.3.tgz/download"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/mugsy_x86-64-v1r2.3"
        copy=no
    # Update Mugsy env script -- replace existing line
    - lineinfile:
        path: "{{ansible_user_dir}}/software/mugsy_x86-64-v1r2.3/mugsyenv.sh"
        line: "export MUGSY_INSTALL={{ansible_user_dir}}/software/mugsy_x86-64-v1r2.3"
        regexp: "export MUGSY_INSTALL"
    # Add Mugsy env script to .bashrc if it does not exist
    - blockinfile:
        path: ~/.bashrc
        block: |
          # Mugsy
          source ~/software/mugsy_x86-64-v1r2.3/mugsyenv.sh

- name: Install Muscle
  block:
    # Create Muscle dest directory
    - file:
        path: "{{ansible_user_dir}}/software/muscle3.8.31"
        state: directory
        recurse: yes
    # Download and uncompress Muscle
    - unarchive:
        src="https://www.drive5.com/muscle/downloads3.8.31/muscle3.8.31_i86linux64.tar.gz"
        dest="{{ansible_user_dir}}/software/muscle3.8.31"
        creates="{{ansible_user_dir}}/software/muscle3.8.31/muscle3.8.31_i86linux64"
        copy=no
    # Create "muscle" symlink
    - file:
        src: "muscle3.8.31_i86linux64"
        dest: "{{ansible_user_dir}}/software/muscle3.8.31/muscle"
        state: link
    # Add Muscle to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/muscle3.8.31"

- name: Install Picard
  block:
    # Create Picard dest directory
    - file:
        path: "{{ansible_user_dir}}/software/picard.2.18.4"
        state: directory
        recurse: yes
    - file:
        path: "{{ansible_user_dir}}/software/picard.2.18.11"
        state: directory
        recurse: yes
    # Download Picard
    -  get_url:
        url: "https://github.com/broadinstitute/picard/releases/download/2.18.4/picard.jar"
        dest: "{{ansible_user_dir}}/software/picard.2.18.4"
    -  get_url:
        url: "https://github.com/broadinstitute/picard/releases/download/2.18.11/picard.jar"
        dest: "{{ansible_user_dir}}/software/picard.2.18.11"
    # Add Picard to classpath in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export CLASSPATH=~/software/picard.2.18.11/picard.jar:$CLASSPATH"

- name: Install Samtools
  block:
    # Download and uncompress Samtools
    - unarchive:
        src="https://sourceforge.net/projects/samtools/files/samtools/1.4/samtools-1.4.tar.bz2"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/samtools-1.4"
        copy=no
    - unarchive:
        src="https://sourceforge.net/projects/samtools/files/samtools/1.8/samtools-1.8.tar.bz2"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/samtools-1.8"
        copy=no
    - make:
        chdir: "{{ansible_user_dir}}/software/samtools-1.4"
    - make:
        chdir: "{{ansible_user_dir}}/software/samtools-1.8"
    # Add Samtools to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/samtools-1.8:~/software/samtools-1.8/misc"

- name: Install Seaview
  block:
    # Download and uncompress Seaview
    - unarchive:
        src="http://doua.prabi.fr/software/seaview_data/seaview4-64.tgz"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/seaview"
        copy=no
    # Add Seaview to path in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export PATH=$PATH:~/software/seaview"

- name: Check for existing smalt installation
  stat:
    path: "{{ansible_user_dir}}/software/smalt-0.7.6"
  register: smalt_bin_directory

- name: Install smalt
  when: not smalt_bin_directory.stat.exists
  block:
    # Download and uncompress smalt
    - unarchive:
        src="https://sourceforge.net/projects/smalt/files/smalt-0.7.6-static.tar.gz"
        dest="{{ansible_user_dir}}/software"
        creates="{{ansible_user_dir}}/software/smalt-0.7.6"
        copy=no
    - name: configure
      command: ./configure
      args:
        chdir: "{{ansible_user_dir}}/software/smalt-0.7.6"
    - make:
        chdir: "{{ansible_user_dir}}/software/smalt-0.7.6"
    - make:
        chdir: "{{ansible_user_dir}}/software/smalt-0.7.6"
        target: install
      become: yes

- name: Install VarScan
  block:
    # Create VarScan dest directory
    - file:
        path: "{{ansible_user_dir}}/software/varscan.v2.3.9"
        state: directory
        recurse: yes
    # Download VarScan
    -  get_url:
        url: "https://sourceforge.net/projects/varscan/files/VarScan.v2.3.9.jar/download"
        dest: "{{ansible_user_dir}}/software/varscan.v2.3.9/VarScan.jar"
    # Add VarScan to classpath in .bashrc if it does not exist
    - lineinfile:
        path: ~/.bashrc
        line: "export CLASSPATH=~/software/varscan.v2.3.9/VarScan.jar:$CLASSPATH"
